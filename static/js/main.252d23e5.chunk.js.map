{"version":3,"sources":["components/Header.js","components/Navbar.js","components/ContentLabel.js","components/Content.js","components/ContentBees.js","components/ContentCaterpillars.js","components/ContentLadybugs.js","components/ContentHome.js","App.js","serviceWorker.js","index.js"],"names":["Header","className","alt","src","React","Component","Navbar","to","ContentLabel","this","props","labelText","Content","additionalContainer","additionalImages","additionalInfo","additionalSource","class","source","bodyText","ContentBees","ContentLadybugs","ContentHome","App","exact","path","component","ContentCaterpillars","href","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"iWAgBeA,G,6KARP,OACI,4BAAQC,UAAU,UACd,wBAAIA,UAAU,iBAAd,gBACA,yBAAKA,UAAU,eAAeC,IAAI,YAAYC,IAAI,0D,GAR7CC,IAAMC,YCiBZC,G,6KAXP,OACI,yBAAKL,UAAU,UAEX,kBAAC,IAAD,CAASM,GAAG,QAAQN,UAAU,gBAA9B,QACA,kBAAC,IAAD,CAASM,GAAG,QAAQN,UAAU,gBAA9B,QACA,kBAAC,IAAD,CAASM,GAAG,gBAAgBN,UAAU,gBAAtC,gBACA,kBAAC,IAAD,CAASM,GAAG,YAAYN,UAAU,gBAAlC,iB,GAXKG,IAAMC,YCoBZG,E,uKAnBP,OACI,0BAAMP,UAAU,WAEZ,yBAAKA,UAAU,4BACX,0BAAMA,UAAU,gBAAhB,SAGA,0BAAMA,UAAU,gBACXQ,KAAKC,MAAMC,YAIpB,uBAAGV,UAAU,uB,GAfFG,IAAMC,WC8ClBO,G,6KArCP,IAEIC,EACAC,EAHAC,EAAiBN,KAAKC,MAAMK,eAC5BC,EAAmBP,KAAKC,MAAMM,iBAelC,OAZGD,IACCF,EAAsB,yBAAKI,MAAM,uBACT,0EACCF,IAG1BC,IACEF,EAAmB,yBAAKb,UAAU,iBAAiBE,IAAKM,KAAKC,MAAMM,iBAAkBd,IAAI,wBAM1F,0BAAMD,UAAU,WACZ,yBAAKA,UAAU,iBAAiBE,IAAKM,KAAKC,MAAMQ,OAAQhB,IAAI,oBAG5D,kBAAC,EAAD,CACGS,UAAaF,KAAKC,MAAMC,YAG3B,uBAAGV,UAAU,iBACRQ,KAAKC,MAAMS,UAIfN,EACAC,O,GArCKV,IAAMC,YCgBbe,E,uKAZP,OACI,kBAAC,EAAD,CACIF,OAAO,sEACPP,UAAW,eACXQ,SAAU,oBAEVJ,eAAe,gCACfC,iBAAiB,+E,GAZPZ,IAAMC,WCcjBe,E,uKATP,OACI,kBAAC,EAAD,CACIF,OAAO,8EACPP,UAAW,6BACXQ,SAAU,sC,GATAf,IAAMC,WCcjBgB,E,uKATP,OACI,kBAAC,EAAD,CACIH,OAAO,yEACPP,UAAW,2BACXQ,SAAU,+B,GATIf,IAAMC,WCUrBiB,E,uKAPP,OACI,uBAAGrB,UAAU,gBAAb,8C,GANcG,IAAMC,WCqCjBkB,MArBf,WACE,OACE,kBAAC,IAAD,KACE,yBAAKtB,UAAU,OACX,kBAAC,EAAD,MACA,kBAAC,EAAD,MAEA,yBAAKA,UAAU,mBACb,kBAAC,IAAD,CAAOuB,OAAK,EAACC,KAAK,QAAQC,UAAWJ,IACrC,kBAAC,IAAD,CAAOG,KAAK,QAAQC,UAAWN,IAC/B,kBAAC,IAAD,CAAOK,KAAK,gBAAgBC,UAAWC,IACvC,kBAAC,IAAD,CAAOF,KAAK,YAAYC,UAAWL,KAIvC,uBAAGO,KAAK,4CAAR,yBCrBYC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.252d23e5.chunk.js","sourcesContent":["import React from 'react';\r\nimport './Header.css';\r\n\r\nclass Header extends React.Component{\r\n\r\n    //props??\r\n    //render: decides what is displayed on the page when this components is used\r\n    render(){\r\n        return(\r\n            <header className=\"header\">\r\n                <h1 className=\"header__title\">Insectopedia</h1>\r\n                <img className=\"header__logo\" alt=\"Site Logo\" src=\"https://img.icons8.com/officel/80/000000/bee.png\"/>\r\n            </header>\r\n        )\r\n    }\r\n}\r\nexport default Header;","import React from 'react';\r\nimport {NavLink} from 'react-router-dom';\r\nimport './Navbar.css';\r\n\r\nclass Navbar extends React.Component{\r\n\r\n    //props??\r\n    //render: decides what is displayed on the page when this components is used\r\n    render(){\r\n        return(\r\n            <nav className=\"navbar\">\r\n                {/* these links change the current route */}\r\n                <NavLink to=\"/home\" className=\"navbar__link\">Home</NavLink>\r\n                <NavLink to=\"/bees\" className=\"navbar__link\">Bees</NavLink>\r\n                <NavLink to=\"/caterpillars\" className=\"navbar__link\">Caterpillars</NavLink>\r\n                <NavLink to=\"/ladybugs\" className=\"navbar__link\">Ladybugs</NavLink>\r\n            </nav>\r\n        )\r\n    }\r\n}\r\nexport default Navbar;","import React from 'react';\r\n\r\nclass ContentLabel extends React.Component{\r\n\r\n    render(){\r\n        return(\r\n            <main className=\"content\">\r\n                \r\n                <div className=\"content__label-container\">\r\n                    <span className=\"content__key\">\r\n                        Name:\r\n                    </span>\r\n                    <span className=\"content__key\">\r\n                        {this.props.labelText}\r\n                    </span>\r\n                </div>\r\n    \r\n                <p className=\"content__body\">\r\n                  \r\n                </p>\r\n            </main>\r\n        )\r\n    }\r\n}\r\nexport default ContentLabel;","import React from 'react';\r\n\r\nimport ContentLabel from './ContentLabel';\r\nimport './Content.css';\r\n\r\nclass Content extends React.Component{\r\n\r\n    //props or properties\r\n    //render: decides what is displayed on the page when this components is used\r\n    //different levels of component\r\n    render(){\r\n        let additionalInfo = this.props.additionalInfo;\r\n        let additionalSource = this.props.additionalSource;\r\n        let additionalContainer;\r\n        let additionalImages;\r\n        if(additionalInfo){\r\n            additionalContainer = <div class=\"content__additional\">\r\n                                    <p>By the way check out this additional info: </p>\r\n                                    {additionalInfo}\r\n                                </div>\r\n        }\r\n        if(additionalSource){\r\n             additionalImages = <img className=\"content__image\" src={this.props.additionalSource} alt=\"Image of honeycomb\" />\r\n                                \r\n        }\r\n\r\n\r\n        return(\r\n            <main className=\"content\">\r\n                <img className=\"content__image\" src={this.props.source} alt=\"Image of insect\" />\r\n\r\n\r\n                <ContentLabel \r\n                   labelText = {this.props.labelText}\r\n                    />\r\n    \r\n                <p className=\"content__body\">\r\n                    {this.props.bodyText}\r\n\r\n                </p>\r\n\r\n                {additionalContainer}\r\n                {additionalImages}\r\n                \r\n            </main>\r\n        )\r\n    }\r\n}\r\nexport default Content;","import React from 'react';\r\n\r\nimport Content from './Content';\r\n\r\nclass ContentBees extends React.Component{\r\n\r\n    //props??\r\n    //render: decides what is displayed on the page when this components is used\r\n    render(){\r\n        return(\r\n            <Content\r\n                source=\"https://cdn.pixabay.com/photo/2016/10/09/19/39/bee-1726659_1280.jpg\"\r\n                labelText= \" Bees (Apis)\"\r\n                bodyText= \"Bees are awesome!\"\r\n\r\n                additionalInfo=\"Did you know bees make honey?\"\r\n                additionalSource=\"https://cdn.pixabay.com/photo/2014/05/04/18/05/beehive-337695_1280.jpg\"\r\n            />\r\n        )\r\n    }\r\n}\r\nexport default ContentBees;","import React from 'react';\r\n\r\nimport Content from './Content';\r\n\r\nclass ContentBees extends React.Component{\r\n\r\n    //props??\r\n    //render: decides what is displayed on the page when this components is used\r\n    render(){\r\n        return(\r\n            <Content\r\n                source=\"https://cdn.pixabay.com/photo/2020/04/30/16/43/caterpillar-5113614_1280.jpg\"\r\n                labelText= \" Caterpillar (Lepidoptera)\"\r\n                bodyText= \"Caterpillars are even better!\"\r\n            />\r\n        )\r\n    }\r\n}\r\nexport default ContentBees;","import React from 'react';\r\n\r\nimport Content from './Content';\r\n\r\nclass ContentLadybugs extends React.Component{\r\n\r\n    //props??\r\n    //render: decides what is displayed on the page when this components is used\r\n    render(){\r\n        return(\r\n            <Content\r\n                source=\"https://cdn.pixabay.com/photo/2015/04/28/13/29/ladybug-743562_1280.jpg\"\r\n                labelText= \" Ladybug (Coccinellidae)\"\r\n                bodyText= \"Ladybugs are the best!\"\r\n            />\r\n        )\r\n    }\r\n}\r\nexport default ContentLadybugs;","import React from 'react';\r\n\r\nclass ContentHome extends React.Component{\r\n\r\n    //props??\r\n    //render: decides what is displayed on the page when this components is used\r\n    render(){\r\n        return(\r\n            <p className=\"content-home\">Click on the links above to learn more</p>\r\n                \r\n        )\r\n        \r\n    }\r\n}\r\nexport default ContentHome;","import React from 'react';\nimport {HashRouter, Route} from 'react-router-dom';\n/*\ndefine our routing region\n\ninside the routing region we need two things\nthe navigation\nthe component*/\n\nimport './App.css';\nimport Header from \"./components/Header\"\nimport Navbar from \"./components/Navbar\"\nimport ContentBees from \"./components/ContentBees\"\nimport ContentCaterpillars from \"./components/ContentCaterpillars\"\nimport ContentLadybugs from \"./components/ContentLadybugs\"\nimport ContentHome from \"./components/ContentHome\"\n\n\nfunction App() {\n  return (\n    <HashRouter>\n      <div className=\"App\">\n          <Header />\n          <Navbar />\n\n          <div className=\"contnet-section\">\n            <Route exact path=\"/home\" component={ContentHome}/>\n            <Route path=\"/bees\" component={ContentBees}/>\n            <Route path=\"/caterpillars\" component={ContentCaterpillars}/>\n            <Route path=\"/ladybugs\" component={ContentLadybugs}/>\n            \n          </div>\n\n        <a href=\"https://icons8.com/icon/2bZlfmx30dhD/bee\">Bee icon by Icons8</a>\n      </div>\n    </HashRouter>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}